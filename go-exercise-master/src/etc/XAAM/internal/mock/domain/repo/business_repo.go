// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repo/business_repo.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	business "github.com/syafdia/xaam/internal/domain/entity/business"
	reflect "reflect"
)

// MockBusinessRepo is a mock of BusinessRepo interface
type MockBusinessRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBusinessRepoMockRecorder
}

// MockBusinessRepoMockRecorder is the mock recorder for MockBusinessRepo
type MockBusinessRepoMockRecorder struct {
	mock *MockBusinessRepo
}

// NewMockBusinessRepo creates a new mock instance
func NewMockBusinessRepo(ctrl *gomock.Controller) *MockBusinessRepo {
	mock := &MockBusinessRepo{ctrl: ctrl}
	mock.recorder = &MockBusinessRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBusinessRepo) EXPECT() *MockBusinessRepoMockRecorder {
	return m.recorder
}

// FindOneByBusinessID mocks base method
func (m *MockBusinessRepo) FindOneByBusinessID(ctx context.Context, businessID string) (business.GetOneResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByBusinessID", ctx, businessID)
	ret0, _ := ret[0].(business.GetOneResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByBusinessID indicates an expected call of FindOneByBusinessID
func (mr *MockBusinessRepoMockRecorder) FindOneByBusinessID(ctx, businessID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByBusinessID", reflect.TypeOf((*MockBusinessRepo)(nil).FindOneByBusinessID), ctx, businessID)
}
